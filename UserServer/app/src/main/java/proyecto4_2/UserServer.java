/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package proyecto4_2;
import com.sun.net.httpserver.HttpContext;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpServer;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.concurrent.Executors;

public class UserServer {
    private static final String LOGIN_ENDPOINT = "/login";
    private static final String MOVIES_ENDPOINT = "/movie";
    private static final String TIMESTAMP_ENDPOINT = "/timestamp";
    private static final String UPDATE_LOGS_ENDPOINT = "/logs/update";

    private final int port;
    private HttpServer server;

    private static String username = "";

    private static FileClient fc;

    public static void main(String[] args) {
        int serverPort = 8081;
        if (args.length == 1) {
            serverPort = Integer.parseInt(args[0]);
        }

        UserServer webServer = new UserServer(serverPort);
        webServer.startServer();

        fc = new FileClient();

        System.out.println("Servidor escuchando en el puerto " + serverPort);
    }

    public UserServer(int port) {
        this.port = port;
    }

    public void startServer() {
        try {
            this.server = HttpServer.create(new InetSocketAddress(port), 0);
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        HttpContext loginContext = server.createContext(LOGIN_ENDPOINT);
        HttpContext movieContext = server.createContext(MOVIES_ENDPOINT);
        HttpContext timestampContext = server.createContext(TIMESTAMP_ENDPOINT);
        HttpContext updateLogsContext = server.createContext(UPDATE_LOGS_ENDPOINT);

        loginContext.setHandler(this::handleLoginRequest);
        timestampContext.setHandler(this::handleTimestampRequest);
        movieContext.setHandler(this::handleMovieRequest);
        updateLogsContext.setHandler(this::handleUpdateLogsRequest);

        server.setExecutor(Executors.newFixedThreadPool(8));
        server.start();
    }

    private void handleMovieRequest(HttpExchange exchange) throws IOException {
        if (!exchange.getRequestMethod().equalsIgnoreCase("post")) {
            exchange.close();
            return;
        }

        byte[] requestBytes = exchange.getRequestBody().readAllBytes();
        String movie = new String(requestBytes);

        sendResponse(fc.getMovie(movie), exchange);
    }

    private void handleLoginRequest(HttpExchange exchange) throws IOException {
        if (!exchange.getRequestMethod().equalsIgnoreCase("post")) {
            exchange.close();
            return;
        }

        byte[] requestBytes = exchange.getRequestBody().readAllBytes();

        String credentialsRaw = new String(requestBytes);
        String[] credentials = credentialsRaw.split(",");

        User user = fc.validateUser(credentials[0], credentials[1]);
        if(user == null) {
            sendResponseError("Error en el usuario o la contrase√±a".getBytes(), exchange);
        }

        username = user.name;

        sendResponse(fc.getMovies(), exchange);
    }

    private void handleUpdateLogsRequest(HttpExchange exchange) throws IOException {
        if (!exchange.getRequestMethod().equalsIgnoreCase("post")) {
            exchange.close();
            return;
        }

        byte[] requestBytes = exchange.getRequestBody().readAllBytes();

        String log = new String(requestBytes);
        sendResponse(fc.updateLog(log), exchange);
    }

    private void handleTimestampRequest(HttpExchange exchange) throws IOException {
        if (!exchange.getRequestMethod().equalsIgnoreCase("post")) {
            exchange.close();
            return;
        }

        byte[] requestBytes = exchange.getRequestBody().readAllBytes();

        String movie = new String(requestBytes);
        List<Log> logs = fc.getLogs();

        for(Log l : logs){
            if(l.name.equals(username)){
                for( Pelicula p: l.peliculas){
                    if( p.name.equals(movie)) sendResponse(p.timestamp, exchange);
                }
            };
        }

        sendResponse("0", exchange);
    }

    private void sendResponseError(byte[] responseBytes, HttpExchange exchange) throws IOException {
        exchange.sendResponseHeaders(404, responseBytes.length);
        OutputStream outputStream = exchange.getResponseBody();
        outputStream.write(responseBytes);
        outputStream.flush();
        outputStream.close();
        exchange.close();
    }

    private void sendResponse(String response, HttpExchange exchange) throws IOException {
        byte[] responseBytes = response.getBytes(StandardCharsets.UTF_8);
        exchange.sendResponseHeaders(200, responseBytes.length);
        OutputStream outputStream = exchange.getResponseBody();
        outputStream.write(responseBytes);
        outputStream.flush();
        outputStream.close();
        exchange.close();
    }
}