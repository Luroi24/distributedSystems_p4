/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package proyecto4;

import com.google.auth.oauth2.ServiceAccountCredentials;
import com.google.cloud.storage.Blob;
import com.google.cloud.storage.BlobId;
import com.google.cloud.storage.BlobInfo;
import com.google.cloud.storage.Storage;
import com.google.cloud.storage.StorageOptions;
import com.google.cloud.storage.Bucket;

import java.io.FileNotFoundException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class StorageData {

    // Datos de el bucket
    private String bucketName = "proyecto4_bucket";
    private String logsFile = "data/logs.json";
    private String usersFile = "data/users.json";
    private Blob logsBlob;
    private Blob userBlob;
    private Storage storage;
    private Gson gson;

    private String logsJson;
    private String usersJson;
    private List<Log> logs;

    private Bucket bucket;

    public StorageData() {
        gson = new GsonBuilder().setPrettyPrinting().create();

        // RecolecciÃ³n de los archivos del bucket
        try{
            storage = StorageOptions.newBuilder()
            .setCredentials(ServiceAccountCredentials.fromStream(loadKey()))
            .build()
            .getService();

            // Read existing content
            logsBlob = storage.get(BlobId.of(bucketName, logsFile));
            logsJson = new String(logsBlob.getContent(), StandardCharsets.UTF_8);

            userBlob = storage.get(BlobId.of(bucketName, usersFile));
            usersJson = new String(userBlob.getContent(), StandardCharsets.UTF_8);

            bucket = storage.get(bucketName);

            Log[] usersTemp = gson.fromJson(logsJson, Log[].class);
            logs = new ArrayList(Arrays.asList(usersTemp)) ;
              
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    private InputStream loadKey() throws FileNotFoundException{
        InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("gcp-key.json");
        if (inputStream == null) {
            throw new FileNotFoundException("File not found in resources folder");
        }

        return inputStream;
    }

    private void appendData(String fileName, String updatedContent){
        BlobId blobId = BlobId.of(bucketName, fileName);
        BlobInfo blobInfo = BlobInfo.newBuilder(blobId).build();
        storage.create(blobInfo, updatedContent.getBytes(StandardCharsets.UTF_8));
    }

    private void updateLogs(){
        logsBlob = storage.get(BlobId.of(bucketName, logsFile));
        logsJson = new String(logsBlob.getContent(), StandardCharsets.UTF_8);

        Log[] usersTemp = gson.fromJson(logsJson, Log[].class);
        logs = new ArrayList(Arrays.asList(usersTemp)) ;
    }

    private Log findLog(String currLog){
        updateLogs();
        for (Log log : logs) {
            if ( log.name.equals(currLog)){
                Log temp = log;
                logs.remove(log);
                return temp;
            };
        }
        return null;
    }


    public String getLogs(){
        updateLogs();
        return logsJson;
    }

    public String getUsers(){
        return usersJson;
    }

    public String addLog(String sLog){
        String[] sData = sLog.split(",");
        Log currLog = findLog(sData[0]); // Deberia de contener al nombre de usuario

        if (currLog == null){
            currLog = new Log(sData[0], null, null, null);
        }

        String[] temp = sData[1].split("_");
        String date = temp[0], time = temp[1];
        currLog.accesos.add(new Acceso(date, time));

        temp = sData[2].split("_");
        date = temp[0];
        time = temp[1];
        currLog.salidas.add(new Salida(date, time));

        if(sData.length > 3){
            boolean movieExists = false;
            for(Pelicula mv : currLog.peliculas){
                if (mv.name.equals(sData[3])){
                    movieExists = true;
                    mv.timestamp = sData[4];
                    break;
                }
            }
            if( !movieExists) currLog.peliculas.add(new Pelicula(sData[3],sData[4]));
        }

        logs.add(currLog);
        String json = gson.toJson(logs);

        appendData(logsFile, json);
        return json;
    }

    public String listMovies(){
        StringBuffer movies = new StringBuffer();

        for(Blob blob : bucket.list(Storage.BlobListOption.prefix("movies/")).iterateAll()){
            String[] temp = blob.getName().split("/");
            movies.append(temp[temp.length-1] + ",");
        }

        return movies.toString();
    }

    public String getMovie(String movie){
        Blob movieBlob = storage.get(BlobId.of(bucketName, "movies/"+movie));
        String movieFile = new String(movieBlob.getContent(), StandardCharsets.UTF_8);

        return movieFile;
    }
}
